#get x_data, y_data

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x_data,y_data,test_size=0.3)

### standardize data (not mandatory)
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
scaler.fit(X_train)

X_train = pd.DataFrame(data=scaler.transform(X_train),columns = X_train.columns,index=X_train.index)

X_test = pd.DataFrame(data=scaler.transform(X_test),columns = X_test.columns,index=X_test.index)
#--------

import tensorflow as tf
newcolname = tf.feature_column.numeric_column('Col')    #do for all to new col name
feat_cols = [a,b,c,â€¦..]

input_func = tf.estimator.inputs.pandas_input_fn(x=X_train,y=y_train ,batch_size=10,num_epochs=1000,shuffle=True)

dnn_model = tf.estimator.DNNRegressor(hidden_units=[6,6,6],feature_columns=feat_cols)

dnn_model.train(input_fn=input_func,steps=2000)

#Prediction
pred_input_func = tf.estimator.inputs.pandas_input_fn( x=X_test, batch_size=10, num_epochs=1, shuffle=False)

predictionstep = dnn_model.predict(pred_input_func)

predictions = list(predictionstep)
predictions

final_preds = []
for pred in predictions:
    final_preds.append(pred['predictions'])

final_preds

#RMSE
from sklearn.metrics import mean_squared_error
mean_squared_error(y_test,final_preds)**0.5

#Eval
eval_input_func = tf.estimator.inputs.pandas_input_fn( x=X_test, y=y_test, batch_size=10, num_epochs=1, shuffle=False)

results = dnn_model.evaluate(eval_input_func)
results



